version: 1
applications:
  - frontend:
      phases:
        preBuild:
          commands:
            - pip install --upgrade pip
            - pip install -r requirements.txt
            - export FLASK_APP=run.py
            - export FLASK_ENV=production
            - export PYTHONUNBUFFERED=1
            - export PYTHONPATH=$PYTHONPATH:/codebuild/output/src2603305598/src/valet-parking-app
            - |
              cat << 'EOF' > gunicorn_config.py
              import multiprocessing
              
              bind = "0.0.0.0:8000"
              worker_class = "eventlet"
              workers = 1
              threads = 1
              preload_app = True
              
              def when_ready(server):
                  # Ensure application context is available
                  from wsgi import app
                  with app.app_context():
                      server.log.info("Application context ready")
              
              def on_starting(server):
                  server.log.info("Server is starting")
              
              def pre_fork(server, worker):
                  server.log.info("Pre-fork hook")
              
              def post_fork(server, worker):
                  from wsgi import app
                  with app.app_context():
                      server.log.info("Worker ready with application context")
              EOF
            - |
              cat << 'EOF' > start.sh
              #!/bin/bash
              set -e
              
              export EVENTLET_NOSSL=yes
              export EVENTLET_DEBUG=false
              export PYTHONPATH="${PYTHONPATH}:${PWD}"
              
              exec gunicorn \
                --config gunicorn_config.py \
                --log-level warning \
                --error-logfile - \
                --access-logfile - \
                --capture-output \
                wsgi:wsgi
              EOF
            - chmod +x start.sh
        build:
          commands:
            - echo "Starting Flask application with Gunicorn"
            - ./start.sh
      artifacts:
        baseDirectory: .
        files:
          - '**/*'
      cache:
        paths:
          - .pip-cache
    appRoot: .