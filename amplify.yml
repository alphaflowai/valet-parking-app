version: 1
applications:
  - frontend:
      phases:
        preBuild:
          commands:
            - pip install --upgrade pip
            - pip install -r requirements.txt
            - export FLASK_APP=run.py
            - export FLASK_ENV=development
            - export PYTHONPATH=$PYTHONPATH:/codebuild/output/src2603305598/src/valet-parking-app
            - mkdir -p config
            - touch config/__init__.py
            - |
              echo '#!/bin/bash
              # Run gunicorn in the background
              gunicorn \
                --worker-class eventlet \
                --workers 1 \
                --bind 0.0.0.0:8000 \
                --timeout 30 \
                --keep-alive 2 \
                --log-level debug \
                --access-logfile - \
                --error-logfile - \
                --capture-output \
                --preload \
                wsgi:wsgi &

              # Store the Gunicorn PID
              GUNICORN_PID=$!

              # Wait for the server to start (max 30 seconds)
              max_attempts=30
              counter=0
              echo "Waiting for server to start..."
              while ! curl -s http://localhost:8000/health > /dev/null && [ $counter -lt $max_attempts ]; do
                sleep 1
                counter=$((counter+1))
                echo "Attempt $counter/$max_attempts..."
              done

              if [ $counter -lt $max_attempts ]; then
                echo "Server started successfully!"
                # Keep the script running
                wait $GUNICORN_PID
              else
                echo "Server failed to start within 30 seconds"
                kill $GUNICORN_PID
                exit 1
              fi' > start.sh
            - chmod +x start.sh
        build:
          commands:
            - echo "Starting Flask application with Gunicorn"
            - ./start.sh
      artifacts:
        baseDirectory: .
        files:
          - '**/*'
      cache:
        paths:
          - .pip-cache
    appRoot: .